class Disjoint{
public:
    vector<int> parent,rank,size;
    Disjoint(int n){
        parent.resize(n+1);
        rank.resize(n+1,0);
        size.resize(n+1,1);
        for(int i=0;i<=n;i++){
            parent[i]=i;
        }
    }
    
    int find_par(int node){
        if(node==parent[node])
            return node;
        return parent[node]=find_par(parent[node]);
    }
    void unionByRank(int u,int v){
        int ulp_u=find_par(u);
        int ulp_v=find_par(v);
        if(ulp_u==ulp_v)return;
        if(rank[ulp_u] > rank[ulp_v]){
            parent[ulp_v]=ulp_u;
        }else if(rank[ulp_u] < rank[ulp_v]){
            parent[ulp_u]=ulp_v;
        }else{
            parent[ulp_u]=ulp_v;
            rank[ulp_v]++;
        }
    }
    void unionBySize(int u ,int v){
        int ulp_u=find_par(u);
        int ulp_v=find_par(v);
        if(ulp_u==ulp_v)return;
        if(size[ulp_u] > size[ulp_v]){
            parent[ulp_v]=ulp_u;
            size[ulp_u]+=size[ulp_v];
        }else{
            parent[ulp_u]=ulp_v;
            size[ulp_v]+=size[ulp_u];
        }
    }
    
};
