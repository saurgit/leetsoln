#include <bits/stdc++.h>
struct Node{
    Node* links[26];
    int startwith=0,endswith=0;

    bool contain_key(char ch){
        return links[ch-'a']!=NULL;
    }
    Node* get(char ch){
        return links[ch-'a'];
    }
    void put(char ch,Node* node){
        links[ch-'a']=node;
    }
    void increaseEnd(){
        endswith++;
    }
    void increaseStart(){
        startwith++;
    }
    void decreaseEnd(){
        endswith--;
    }
    void decreaseStart(){
        startwith--;
    }
    int getEnd(){
        return endswith;
    }
    int getprefix(){
        return startwith;
    }


};
class Trie{
    private: Node* root;

    public:

    Trie(){
        root=new Node();
        // Write your code here.
    }

    void insert(string &word){

        Node* node=root;
        for(int i=0;i<word.size();i++){
            if(!node->contain_key(word[i])){
                node->put(word[i],new Node());
            }
            node=node->get(word[i]);
            node->increaseStart();
        }
        node->increaseEnd();
        // Write your code here.
    }

    int countWordsEqualTo(string &word){
        Node* node=root;
        for(int i=0;i<word.size();i++){
            if(node->contain_key(word[i]))
                node=node->get(word[i]);
            else
                return 0;
        }
        node->getEnd();
        // Write your code here.
    }

    int countWordsStartingWith(string &word){
        Node* node=root;
        for(int i=0;i<word.size();i++){
            if(node->contain_key(word[i])){
                node=node->get(word[i]);
            }else
                return 0;
        }
        node->getprefix();
        // Write your code here.
    }

    void erase(string &word){
        Node* node=root;
        for(int i=0;i<word.size();i++){
            if(node->contain_key(word[i])){
                node=node->get(word[i]);
                node->decreaseStart();
            }
            else
               return;
        }
        node->decreaseEnd();
        // Write your code here.
    }
};
